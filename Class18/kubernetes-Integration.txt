To start this handson lab,you need following resources.

1. Google cloud (or any other cloud or some VM's from your local machine).
2. Jenkins VM should have 2 CPU / 4 GB memory / 40 gb Disk. Install Jenkins in CentOS 7 OS machine.
3. Class 6 and Class 7 must be completed and ready
4. Make sure you have root access or root login credentials.
5. Install K8s master and 1 worker node 

*******************************************************************************************************************
prerequisites
Step 1 : Install kubernetes in Ubuntu 18.04 LTS (1 master and 1 worker node)

refer --> https://github.com/cloudnloud/Kubernetes_Admin_Training/blob/main/class3-k8s-installation/installation.txt

Step 2: Install and configure jenkins in centos 7 machine

refer --> https://github.com/cloudnloud/Devops_Tools_Training/tree/main/Class6

*******************************************************************************************************************
Step 1 : Create user in kubernetes master machine
Step 2 : Exchange SSH keys
Step 3:  publish over ssh jenkins plugin installation in jenkins console
Step 4:  integrate kubernetes environment into jenkins console under
Step 5:  Create new pipeline and execute just application build
Step 6:  Create new pipeline and achieve the following
          1. Download the raw java code from github
          2. compile and build and create war file
          3. move the application package war file to kubernetes master
          4. create docker custom image and deploy this created application war file.
          5. Push the created deployed application custm docker image to hub.docker.com
          6. Now deploy the newly created image to kubernetes cluster.
          7. test the newly created game application

*******************************************************************************************************************

Step 1 : Create user in kubernetes master machine

apt install wget git  -y

adduser --home /var/lib/jenkins jenkins

cat /etc/passwd | grep -i jenkins

passwd jenkins

sudo gpasswd -a jenkins docker
reboot

docker info command from jenkins user login should work.

cp /etc/kubernetes/admin.conf /var/tmp
chmod 777 /var/tmp/admin.conf

su - -s /bin/bash jenkins


mkdir -p $HOME/.kube
cp -i /var/tmp/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

from jenkins user make sure the following commands are working

kubectl get nodes

*******************************************************************************************************************

Step 2 : Exchange SSH keys

if you are using cloud machines then first ensure direct ssh is enabled or not ?

in both linux machines go to /etc/ssh/sshd_config file
enable the following line

PasswordAuthentication yes

disable following line

PasswordAuthentication no

save this file

run the below command

systemctl restart sshd



Now go to jenkins machine and login as an jenkins user

su - -s /bin/bash jenkins
ssh-keygen
cat /var/lib/jenkins/.ssh/id_rsa.pub

now from jenkins machine try to copy the ssh keys to 2nd linux machine

ssh-copy-id master

noet : master is kubenetes master machine

after ssh keys are copied try to ssh login from jenkins machine.If you are able to login without password then you are good to go.

ssh master (from jenkins machine)

Also run the following command from jenkins machine as an jenkins user

docker login


*******************************************************************************************************************
Step 3: publish over ssh jenkins plugin installation in jenkins console


*******************************************************************************************************************

Step 4: integrate Linux machine into jenkins console under

got to jenkins console --> go to system configuration --> goto Publish over SSH section

SSH Servers

name - kuber-machine
remote directory - /var/lib/jenkins

*******************************************************************************************************************
Step 5: create new pipeline and execute just application build

https://github.com/cloudnloud/maven_demo
*******************************************************************************************************************
Step 6: Create new pipeline and start new container from jenkins pipeline itself.

in post build actions under --> Send Build artifacts Over SSH -->

soure files --> gameoflife-web/target/*.war
Remove prefix --> gameoflife-web/target/

if we give the above the in Jenkins home directory under /var/lib/Jenkins/ folder the war file will be saved in docker machine.

Jenkins server name is jenkins

Go to kubernetes master machine and create dockerfile like below or use directly the dockerfile github link

https://raw.githubusercontent.com/cloudnloud/Devops_Tools_Training/main/Class18/Dockerfile

[jenkins@docker ~]$ cat Dockerfile 
FROM tomcat:latest
MAINTAINER vijayabalan has created this container based tomcat
MAINTAINER artifacts will be copied from jenkins build server
MAINTAINER Then war file will be deployed into tomcat which is running on container
COPY ./gameoflife.war /usr/local/tomcat/webapps/




cd /var/lib/jenkins/;wget https://raw.githubusercontent.com/cloudnloud/Devops_Tools_Training/main/Class18/Dockerfile;sleep 30s;docker build -t cloudnloud/game:v1.0 .;sleep 30s;docker push cloudnloud/game:v1.0;kubectl apply -f https://raw.githubusercontent.com/cloudnloud/Devops_Tools_Training/main/Class18/game.yaml

watch -n 1 kubectl get all -n facebook -o wide


test the application


http://35.224.137.76:32001/gameoflife/

Kubernetes machine ip address is - 35.224.137.76

*******************************************************************************************************************
Practice more time ?


now delete all images.
**********************
To stop any running container

docker stop $(docker ps -q)  

********************
To remove all the containers

docker rm $(docker ps -a -q)


docker rmi $(docker images -a -q)



